{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Message type for `execute` entry_point",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "set_configs"
      ],
      "properties": {
        "set_configs": {
          "type": "object",
          "required": [
            "bounty_denom",
            "callback_limit_gas",
            "fee",
            "max_callback"
          ],
          "properties": {
            "bounty_denom": {
              "type": "string"
            },
            "callback_limit_gas": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "fee": {
              "$ref": "#/definitions/Uint128"
            },
            "max_callback": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_nois_configs"
      ],
      "properties": {
        "set_nois_configs": {
          "type": "object",
          "required": [
            "nois_fee",
            "nois_proxy"
          ],
          "properties": {
            "nois_fee": {
              "$ref": "#/definitions/Uint128"
            },
            "nois_proxy": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_time_configs"
      ],
      "properties": {
        "set_time_configs": {
          "type": "object",
          "required": [
            "time_expired",
            "time_per_block"
          ],
          "properties": {
            "time_expired": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "time_per_block": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_bot"
      ],
      "properties": {
        "register_bot": {
          "type": "object",
          "required": [
            "hashed_api_key",
            "moniker"
          ],
          "properties": {
            "hashed_api_key": {
              "type": "string"
            },
            "moniker": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_bot"
      ],
      "properties": {
        "update_bot": {
          "type": "object",
          "required": [
            "hashed_api_key",
            "moniker"
          ],
          "properties": {
            "hashed_api_key": {
              "type": "string"
            },
            "moniker": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_bot"
      ],
      "properties": {
        "remove_bot": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "request_hex_randomness"
      ],
      "properties": {
        "request_hex_randomness": {
          "type": "object",
          "required": [
            "num",
            "request_id"
          ],
          "properties": {
            "num": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "request_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "request_int_randomness"
      ],
      "properties": {
        "request_int_randomness": {
          "type": "object",
          "required": [
            "max",
            "min",
            "num",
            "request_id"
          ],
          "properties": {
            "max": {
              "type": "integer",
              "format": "int32"
            },
            "min": {
              "type": "integer",
              "format": "int32"
            },
            "num": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "request_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_randomness"
      ],
      "properties": {
        "add_randomness": {
          "type": "object",
          "required": [
            "random_value",
            "signature"
          ],
          "properties": {
            "random_value": {
              "type": "string"
            },
            "signature": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "nois_receive"
      ],
      "properties": {
        "nois_receive": {
          "type": "object",
          "required": [
            "callback"
          ],
          "properties": {
            "callback": {
              "$ref": "#/definitions/NoisCallback"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "HexBinary": {
      "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "NoisCallback": {
      "description": "This must be accepted in an `NoisReceive { callback: NoisCallback }` enum case in the ExecuteMsg of the app.",
      "type": "object",
      "required": [
        "job_id",
        "randomness"
      ],
      "properties": {
        "job_id": {
          "description": "The ID chosen by the caller for this job. Use this field to map responses to requests.",
          "type": "string"
        },
        "randomness": {
          "$ref": "#/definitions/HexBinary"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
